<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lin&#39;s Notes</title>
  
  <subtitle>All About IT Infra and Cloud</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://notes.yuanlinios.me/"/>
  <updated>2020-03-13T06:56:26.564Z</updated>
  <id>https://notes.yuanlinios.me/</id>
  
  <author>
    <name>L. Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实施 AWS Landing Zone 3: 部署 Initiation Stack</title>
    <link href="https://notes.yuanlinios.me/2020-03-12/%E5%AE%9E%E6%96%BD-AWS-Landing-Zone-3-%E9%83%A8%E7%BD%B2-Initiation-Stack/"/>
    <id>https://notes.yuanlinios.me/2020-03-12/%E5%AE%9E%E6%96%BD-AWS-Landing-Zone-3-%E9%83%A8%E7%BD%B2-Initiation-Stack/</id>
    <published>2020-03-12T16:42:14.000Z</published>
    <updated>2020-03-13T06:56:26.564Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍 Landing Zone Initiation Stack 的部署, 参数解析以及一些容易出错的地方</p><a id="more"></a><h2 id="创建-initiation-stack">创建 Initiation Stack</h2><p>登入组织账号 (即这里的 yl-master), 进入 Cloudformation 服务. 创建一个新的 stack: <img src="create-initiation-stack.png"></p><p>template s3 url 使用 https://s3.amazonaws.com/solutions-reference/aws-landing-zone/v2.3.1/aws-landing-zone-initiation.template</p><div class="note info">            <p>Landing Zone Initiation stack 是一个比较庞大的 cloudformation template, 大约近 6000 行配置, 其核心部分是 5 个 Lambda 和 7 个 Step Functions. 但这并不是 Landing Zone 的全貌, 因为它还引用了很多外部资源. 在 Initiation stack template 中大部分内容 (约 2/3) 是 7 个 StateMachines (Step Functions) 的定义.</p>          </div><div class="note info">            <p>AWS 会对 Landing Zone 进行更新升级, 最新版本的信息可以从 https://aws.amazon.com/solutions/aws-landing-zone/ 获取</p>          </div><h3 id="参数详解">参数详解</h3><h4 id="landing-zone-core-account-configuration">Landing Zone Core Account Configuration</h4><p>核心账号配置部分</p><ul><li>Shared Service Account Email Address: 填写现存共享服务账号的邮件地址. 如果你的现存环境中还没有共享服务账号也没关系, 如果有需要, Landing Zone 可以帮你创建</li><li>Log Archive Account Email Address: 填写现存的日志账号邮件地址. 同上</li><li>Security Account Email Address: 填写现存的安全审计账号的邮件地址. 同上</li><li>Nest OU Name Delimiter: Colon (:) 使用冒号作为 OU 路径的界定符. 保持默认即可</li><li>Core OU Name: vopsdev-landing-zone:core 根据上一篇文章中的 OU 规划来填写, 这里是核心账号所在的 OU</li><li>Non Core OU Names: vopsdev-landing-zone:production,vopsdev-landing-zone:department,vopsdev-landing-zone:staging,vopsdev-landing-zone:sandbox 根据上一篇文章中的 OU 规划来写, 这里是非核心账号所在的 OU. 使用逗号作为分隔符</li><li>Security Alert Email Address: 接受安全告警邮件的地址. 具体是来自 GuardDuty Finding, Cloudwatch Alarm, Config Rules Compliance Status Change 的消息</li><li>Lock StackSetsExecution Role: Yes. 是否锁定角色 AWSCloudFormationStackSetExecutionRole. Landing Zone 通过 Stackset 来部署资源基线到各个受控账号, 因此会在各个账号下创建角色 AWSCloudFormationStackSetExecutionRole 来执行 stack instance. 该角色具有账户的管理员权限. 锁定该角色的含义是只允许特定的实体 (principal) 来承担 (assume role).</li><li>Subscribe All Change Events Email To Topic: No. 是否订阅所有的配置变更事件. 按需设置</li><li>All Change Events Email: 接受配置变更事件通知的邮件地址</li></ul><h4 id="landing-zone-pipeline-configuration">Landing Zone Pipeline Configuration</h4><p>流水线配置部分</p><ul><li>Pipeline Approval Stage: Yes. 给 Landing Zone 配置流水线添加手动批准的步骤</li><li>Pipeline Approval Email Address: 批准 Landing Zone 配置流水线的邮件地址</li><li>Auto Build Landing Zone: No. 是否在 initiation stack 创建完成后立刻启动配置流水线. 我们需要对配置进行定制, 因此这里一定需要设置为 No</li></ul><h4 id="shared-services-vpc-configuration">Shared Services VPC Configuration</h4><p>共享服务的 VPC 配置部分</p><ul><li>Shared Services VPC Options: Shared-Services-Network-3-AZs. 选择共享服务账号的 VPC 类型. 仅仅用来生成初始配置. 并不会在 Initiation 阶段创建实际的资源. 后面可以按自己的需要修改初始配置</li><li>Shared Services VPC CIDR: 100.65.0.0/16 共享服务 VPC 的网段. 同上</li></ul><h4 id="vpc-flow-logs-retention-policy">VPC Flow Logs Retention Policy</h4><p>VPC Flow Logs 的留存策略</p><ul><li>VPC Flow Logs Retention In Days: 90</li></ul><h4 id="aws-security-and-configuration-services">AWS Security and Configuration Services</h4><p>安全和配置管理部分</p><ul><li>Enable AWS Security and Configuraiton Monitoring in: All regions 在哪些区域启用安全和配置管理服务 (GuardDuty, Config 之类). 同样也仅仅用于生成初始化配置. 后期可以按需要修改</li></ul><h4 id="aws-config-rules">AWS Config Rules</h4><p>启用哪些 AWS Config Rules. 按默认都启用即可</p><h4 id="add-on-publisher-configuraiton">Add-On Publisher Configuraiton</h4><p>Add-On 产品更新配置部分</p><ul><li>AWS Manages Service Catalog Add-On Portfolio? Manual Updates 手动管理 Add-On Portfolio 的版本更新</li><li>Add-On Update Notification Email: Add-On 更新通知的邮件地址. 按需设置</li></ul><h2 id="关于通知邮件地址">关于通知邮件地址</h2><h3 id="结论">结论</h3><p>不同的 AWS 账号需要不同的邮件地址, 这基本不会出错. 但是在部署 Landing Zone Initiation stack 时需要注意 Security Account Email Address 的邮件地址不能用来接收 Security Alert. 即 Security Alert Email Address 和 Security Account Email Address 不能是同一个.</p><h3 id="具体原因">具体原因</h3><p>Initiaton stack 中有这样的资源定义</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">LandingZoneConfigDeployer:</span></span><br><span class="line">  <span class="attr">Type:</span> <span class="string">Custom::ConfigDeployer</span></span><br><span class="line">  <span class="attr">Properties:</span></span><br><span class="line">    <span class="attr">metrics_flag:</span> <span class="type">!FindInMap</span> <span class="string">[Solution,</span> <span class="string">Metrics,</span> <span class="string">SendAnonymousData]</span></span><br><span class="line">    <span class="attr">email_list:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="type">!Ref</span> <span class="string">SharedServicesAccountEmail</span></span><br><span class="line">      <span class="bullet">-</span> <span class="type">!Ref</span> <span class="string">LoggingAccountEmail</span></span><br><span class="line">      <span class="bullet">-</span> <span class="type">!Ref</span> <span class="string">SecurityAccountEmail</span></span><br><span class="line">      <span class="bullet">-</span> <span class="type">!Ref</span> <span class="string">SecurityAlertEmail</span></span><br></pre></td></tr></table></figure><p>而 Lambda 函数 LandingZoneDeploymentLambda 的 config_deployer.py 中会检查 email_list 中是否有重复地址 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_email_validator</span><span class="params">(email_list)</span>:</span></span><br><span class="line">    result = set([x <span class="keyword">for</span> x <span class="keyword">in</span> email_list <span class="keyword">if</span> email_list.count(x) &gt; <span class="number">1</span>])</span><br><span class="line">    duplicate_list = list(result)</span><br><span class="line">    logger.info(<span class="string">"Duplicate Emails: &#123;&#125;"</span>.format(duplicate_list))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> duplicate_list:</span><br><span class="line">        logger.info(<span class="string">"Duplicate emails not found"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"Found duplicate email(s) &#123;&#125; in the parameters."</span>.format(duplicate_list))</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">config_deployer</span><span class="params">(event)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s3 = S3(logger)</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># Check if the emails are Unique</span></span><br><span class="line">    unique_email_validator(event.get(<span class="string">'email_list'</span>))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍 Landing Zone Initiation Stack 的部署, 参数解析以及一些容易出错的地方&lt;/p&gt;
    
    </summary>
    
    
      <category term="AWS" scheme="https://notes.yuanlinios.me/categories/AWS/"/>
    
      <category term="Landing Zone" scheme="https://notes.yuanlinios.me/categories/AWS/Landing-Zone/"/>
    
    
      <category term="AWS" scheme="https://notes.yuanlinios.me/tags/AWS/"/>
    
      <category term="Landing Zone" scheme="https://notes.yuanlinios.me/tags/Landing-Zone/"/>
    
  </entry>
  
  <entry>
    <title>实施 AWS Landing Zone 2: 实施前场景与目标规划</title>
    <link href="https://notes.yuanlinios.me/2020-03-12/%E5%AE%9E%E6%96%BD-AWS-Landing-Zone-2-%E5%AE%9E%E6%96%BD%E5%89%8D%E5%9C%BA%E6%99%AF%E4%B8%8E%E7%9B%AE%E6%A0%87%E8%A7%84%E5%88%92/"/>
    <id>https://notes.yuanlinios.me/2020-03-12/%E5%AE%9E%E6%96%BD-AWS-Landing-Zone-2-%E5%AE%9E%E6%96%BD%E5%89%8D%E5%9C%BA%E6%99%AF%E4%B8%8E%E7%9B%AE%E6%A0%87%E8%A7%84%E5%88%92/</id>
    <published>2020-03-12T15:33:52.000Z</published>
    <updated>2020-03-13T04:57:46.766Z</updated>
    
    <content type="html"><![CDATA[<p>该系列文章将通过一个虚拟场景介绍如何在现存的多账户环境下实施 Landing Zone. 本文介绍实施前企业多账户环境的现状, 迁移的目标规划和准备工作</p><a id="more"></a><h2 id="实施前状况">实施前状况</h2><p>VOPSDEV.COM 目前在 AWS Organization 下按照部门职能和项目环境类型划分了多个组织单元 (Organization Unit, OU) 并采用了多个账号以实现职责/资源分离:</p><p><img src="original-organization-structure.png"></p><p>业务的生产环境和测试环境账号分别在 production OU 和 staging OU 下, 开发人员的沙盒环境账号创建在 sandbox OU 下, 各个职能部门的账号创建在 department OU 下. Organization master, 安全, 审计日志, 公共服务相关账号在 core OU 下. 具体分布如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Root&#x2F;</span><br><span class="line">  vopsdev&#x2F;</span><br><span class="line">    production&#x2F;</span><br><span class="line">      yl-production</span><br><span class="line">    staging&#x2F;</span><br><span class="line">      yl-stagin</span><br><span class="line">    department&#x2F;</span><br><span class="line">      yl-marketing</span><br><span class="line">      yl-hr</span><br><span class="line">      yl-network</span><br><span class="line">      yl-collaboration</span><br><span class="line">      yl-itdev</span><br><span class="line">      yl-itops</span><br><span class="line">    sandbox&#x2F;</span><br><span class="line">      yl-sandbox-1</span><br><span class="line">      yl-sandbox-2</span><br><span class="line">    core&#x2F;</span><br><span class="line">      yl-log-archive</span><br><span class="line">      yl-security</span><br><span class="line">      yl-shared-services</span><br><span class="line">      yl-master</span><br></pre></td></tr></table></figure><p>如果有接入公司 VPN 的需要, 经批准后, 账号的 VPC 可以通过 transit gateway attachment 连接到网络部门账号 yl-network 下的 transit gateway 来访问内网资源. DNS, Active Directory 之类的公共服务已经在共享服务账号 yl-shared-services 下创建完成. SSO 在组织账号 yl-master 下配置完成, 使用 AD-Connector 连接到共享服务账号下的 Active Directory 作为身份认证源.</p><p>由于缺少统一的配置管理方案, 各个账户初始化完成, 交付给用户使用后, 难以继续维持配置基线. 新的配置基线发布后又很难应用到现存的账户. 为此考虑实施 Landing Zone</p><h2 id="实施规划">实施规划</h2><p>在组织根下创建一个新的 OU 分支, 后面会将 Landing Zone 应用到这个 OU 分支上 <img src="intermediate-organization-structure.png"></p><p>然后逐步将现有账号迁移到新的 OU 分支下, 由 Landing Zone Codepipeline 创建并维持基线资源. 而所有新的账号将通过 Landing Zone 的 Accounting Vending Machine 创建.</p><p>所有账户迁移完成后即可删除旧的 OU 分支, 最终的账号分布如下 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Root&#x2F;</span><br><span class="line">  vopsdev-landing-zone&#x2F;</span><br><span class="line">    production&#x2F;</span><br><span class="line">      yl-production</span><br><span class="line">    staging&#x2F;</span><br><span class="line">      yl-stagin</span><br><span class="line">    department&#x2F;</span><br><span class="line">      yl-marketing</span><br><span class="line">      yl-hr</span><br><span class="line">      yl-network</span><br><span class="line">      yl-collaboration</span><br><span class="line">      yl-itdev</span><br><span class="line">      yl-itops</span><br><span class="line">    sandbox&#x2F;</span><br><span class="line">      yl-sandbox-1</span><br><span class="line">      yl-sandbox-2</span><br><span class="line">    core&#x2F;</span><br><span class="line">      yl-log-archive</span><br><span class="line">      yl-security</span><br><span class="line">      yl-shared-services</span><br><span class="line">      yl-master</span><br></pre></td></tr></table></figure></p><h2 id="资源限制">资源限制</h2><p>对于一个新创建的账号, 其 AWS Organization 下默认只能加入很少几个账号 (2个?) 无法满足 Landing Zone 的要求. 如果你想从头开始实施, 请确保提升组织账号的 AWS Organization Account Limit (需要通过给 AWS support 提交 ticket)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该系列文章将通过一个虚拟场景介绍如何在现存的多账户环境下实施 Landing Zone. 本文介绍实施前企业多账户环境的现状, 迁移的目标规划和准备工作&lt;/p&gt;
    
    </summary>
    
    
      <category term="AWS" scheme="https://notes.yuanlinios.me/categories/AWS/"/>
    
      <category term="Landing Zone" scheme="https://notes.yuanlinios.me/categories/AWS/Landing-Zone/"/>
    
    
      <category term="AWS" scheme="https://notes.yuanlinios.me/tags/AWS/"/>
    
      <category term="Landing Zone" scheme="https://notes.yuanlinios.me/tags/Landing-Zone/"/>
    
  </entry>
  
  <entry>
    <title>实施 AWS Landing Zone 1: 背景及架构介绍</title>
    <link href="https://notes.yuanlinios.me/2020-03-08/%E5%AE%9E%E6%96%BD-AWS-Landing-Zone-1-%E8%83%8C%E6%99%AF%E5%8F%8A%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
    <id>https://notes.yuanlinios.me/2020-03-08/%E5%AE%9E%E6%96%BD-AWS-Landing-Zone-1-%E8%83%8C%E6%99%AF%E5%8F%8A%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-03-08T14:37:50.000Z</published>
    <updated>2020-03-09T06:26:41.099Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了 AWS 多账号管理的需求, Landing Zone 方案的背景及基本结构, Landing Zone 方案和 Control Tower 的对比与选择</p><a id="more"></a><h2 id="多账户的需求和面临的挑战">多账户的需求和面临的挑战</h2><p>随着越来越多的工作负载迁移到 AWS 公有云, 过去的单个账户逐渐无法满足复杂环境的需要: 难以清晰界定的职责边界, 资源无法有效隔离, 对不同部门团队的计费和审计等. 此时会自然而然的引入多账户策略: 不同部门/团队, 不同环境使用不同的 AWS 账号. 优点很明显</p><ul><li>降低触及单个账户资源上限的风险</li><li>不同团队的职责分离</li><li>开发/测试/生产环境的资源隔离</li><li>减少人为故障的影响范围</li></ul><p>AWS Organization 提供了多账户环境的基础. 然而创建账户, 加入组织并完成初始化基线配置是一项繁琐的工作. 如何确保各个账户的合规性和配置的一致性? 如果后期配置基线发生变更, 又如何将基线变更追溯的应用到所有的现存账户上? Landing Zone 方案旨在解决这些问题.</p><h2 id="landing-zone-简介">Landing Zone 简介</h2><p>Landing Zone 是 AWS 在 2018 年推出的一套解决方案 (注意: 并不是一个 AWS 原生服务), 用来帮助用户根据 AWS 最佳实践, 快速建立安全的多账户环境</p><p><img src="aws-landing-zone-architecture.png"></p><p>上图为 Landing Zone 的基本结构:</p><ul><li>核心账户: master, shared services, log archive, security<ul><li>Master: 也称为 Organization account. 是创建 AWS Organization, Landing Zone 基础组件 (Service Catalog, CodePipeline, State Machines) 的地方</li><li>Shared Services: 公共服务所在的账号</li><li>Log Archive: 存放所有账户 Cloudtrail 和 Config log的 S3 bucket 所在的账户</li><li>Security: Guarduty master 所在账户, 全局 admin/readonly 角色所在账户</li></ul></li><li>Accounting Vending Machine (AVM): 是 Landing Zone 在 Service Catalog 里创建的一个产品, 通过运行 AVM 来创建新账户并应用配置基线</li><li>Landing Zone Codepipline: 配置变更流水线. 触发该流水线来更改核心账户资源, Service Control Policies 和基线资源等. 该流水线最终会调用 AVM 将基线资源变更应用到所有账户上</li></ul><p>各个组件/服务更深入的介绍将在后续的系列文章中给出.</p><h2 id="control-tower-还是-landing-zone">Control Tower 还是 Landing Zone?</h2><p>Landing Zone方案涉及多种AWS服务, 其部署较为复杂, 因此在 2019 年 AWS 推出了 Control Tower 服务, 旨在帮助用户通过最简单的方式设置<strong>全新</strong>的多账户 AWS 环境. 其背后依然是 Landing Zone, 但是隐藏了实现细节和基础服务.</p><p>用户在实际生产环境下该如何选择?</p><ul><li>Control Tower 只适用于全新部署 (greenfield). 如果你已经建立了多账户的环境 (Organization, SSO), 又不想迁移账户, 此时应该选择 Landing Zone</li><li>Landing Zone 具有更强的定制化 (当然这也正是它更加复杂的原因), 所有的基线资源都通过 Cloudformation template 创建, 用户可以方便的修改预设基线资源或者添加自定义资源</li><li>Landing Zone提供了 CI/CD 流水线, 用户可以将其配置保存在代码仓库中以实现版本控制</li></ul><h2 id="在现存多账户环境下实施-landing-zone">在现存多账户环境下实施 Landing Zone</h2><p>由于实际环境的复杂性, Landing Zone 方案在实施 AWS 最佳实践的同时, 不可避免的会对用户的环境做一些假设, 因此其部署的某些服务或者服务的设置对特定的用户可能并不适用. 此时需要对其预设配置进行调整.</p><p>举个例子, 默认 Landing Zone 会在所有账号和共享服务账号 (shared services account) 之间做 VPC peering 以便所有账户可以访问共享服务账号中的公共服务. 然而 VPC peering 本身有诸多限制, 企业环境下可能更多会选择 transit VPC 架构或者使用 transit gateway. 此时用户需要修改 Landing Zone 配置模板以匹配自身环境. 在系列的后续文章中我将逐一列示.</p><div class="note warning">            <p>AWS 声明 Landing Zone 必须由客户的 AWS account 团队或者经过认证的合作伙伴来部署, 以确保方案的实施成功. 如果你想自己实施, 请自行评估风险</p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了 AWS 多账号管理的需求, Landing Zone 方案的背景及基本结构, Landing Zone 方案和 Control Tower 的对比与选择&lt;/p&gt;
    
    </summary>
    
    
      <category term="AWS" scheme="https://notes.yuanlinios.me/categories/AWS/"/>
    
      <category term="Landing Zone" scheme="https://notes.yuanlinios.me/categories/AWS/Landing-Zone/"/>
    
    
      <category term="AWS" scheme="https://notes.yuanlinios.me/tags/AWS/"/>
    
      <category term="Landing Zone" scheme="https://notes.yuanlinios.me/tags/Landing-Zone/"/>
    
  </entry>
  
</feed>
